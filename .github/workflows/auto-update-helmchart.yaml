name: Upgrade Helm Chart

on:
  schedule:
    - cron: "44 14 * * *"

jobs:
  upgrade-helm-chart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.6.3  # Update to the desired Helm version

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9  # Update to the desired Python version

      - name: Install pyaml
        run: |
          pip install pyaml==21.10.1
      - name: Install updatecli
        run: |
          curl -sL -o /tmp/updatecli_amd64.deb https://github.com/updatecli/updatecli/releases/download/v0.24.0/updatecli_amd64.deb
          sudo apt install /tmp/updatecli_amd64.deb

      - name: Run chart bumper script
        env:
          CHART_PATH: ${{ secrets.CHART_PATH }}
          BUMP_MAJOR: ${{ secrets.BUMP_MAJOR }}
        run: |
          python3 -c '
          # Place the content of your Python script here

          from pathlib import Path
          import subprocess
          import yaml
          import os
          import traceback

          # Add charts here where it is known that higher versions are not
          # yet stable or that you would like to disable automatic upgrades for
          EXCLUDED_CHARTS = []

          # Inject a BUMP_MAJOR env variable if you would like the script to automatically
          # bump major chart versions too. Make sure you inspect the upgrade instructions before merging!
          BUMP_MAJOR = os.environ.get("BUMP_MAJOR") == "true"

          # Path to the chart directory
          # CHART_PATH = "charts/jaegertracing"
          CHART_PATH = os.environ.get("CHART_PATH", "")

          def update_chart(path_chart: str):
              """
              Given a path to a helm chart. Bump the version of the dependencies of this chart
              if any newer versions exist.
              """

              chart_file = os.path.join(path_chart, "Chart.yaml")

              if not os.path.isfile(chart_file):
                  print(f"Chart.yaml not found in {path_chart}")
                  return

              with open(chart_file) as f:
                  text = f.read()

              chart: dict = yaml.safe_load(text)

              if not "dependencies" in chart:
                  return

              for i, dependency in enumerate(chart["dependencies"]):

                  if dependency["name"] in EXCLUDED_CHARTS:
                      print(f"Skipping {dependency['name']} because it is excluded..")
                      continue

                  # bump major or minor depending on set env variable
                  version = f"{dependency['version'].split('.')[0]}.*.*" if not BUMP_MAJOR else "*.*.*"
                  manifest = f"""
                  sources:
                      latestMinorRelease:
                          kind: helmChart
                          spec:
                              url: "{dependency['repository']}"
                              name: "{dependency['name']}"
                              version: "{version}"
                  conditions: {{}}
                  targets:
                      chart:
                          name: Bump Chart dependencies
                          kind: helmChart
                          spec:
                              Name: "{path_chart}"
                              file: "Chart.yaml"
                              key: "dependencies[{i}].version"
                              versionIncrement: "patch"
                  """

                  with open(os.path.join(path_chart, "manifest.yaml"), "w") as f:
                      f.write(manifest)

                  subprocess.check_output("updatecli apply --config manifest.yaml".split(" "))

          if __name__ == "__main__":
              # Update the chart path with the actual path to your chart
              path_chart = os.environ.get("CHART_PATH")
              if path_chart:
                  update_chart(path_chart)
              else:
                  print("CHART_PATH environment variable not set.")
          '

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: "feat: Upgrade Helm Chart test"
          title: "chore: Upgrade Jaeger Helm Chart Test"
          body: |
            Automatic upgrade of Helm chart version using updatecli
          branch: upgrade-helm-chart-jaeger-test
          base: main
          token: ${{ secrets.TGITHUB_TOKEN }}
          reviewers: |
            omohammed95
            # Add your teammates as reviewers
